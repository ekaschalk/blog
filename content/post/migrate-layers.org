#+TITLE: Migrating to Spacemacs Layers
#+SLUG: migrate-layers
#+DATE: 2017-07-14
#+CATEGORIES: emacs spacemacs
#+SUMMARY: Manage your Spacemacs with personal layers.
#+DRAFT: false

Spacemacs is referred for its evil integration, space-based bindings, and
community contributed /layers/ that collect, configure, and integrate groups of
packages.

For how much they add to Emacs, motivations for personal layers are largely
undocumented.

I discuss benefits, approaches, and gotchas with layer-based configurations.

I've migrated my entire ~dotspacemacs/user-config~ into personal layers - now 6
lines vs 1,500.

See [[https://github.com/ekaschalk/.spacemacs.d]], my viewer-friendly configuration .

* Layers
** Motivation

# If you:
# have a lot of config, especially personal pkgs
# value modularity, usability, documentation

# talk about disable/enabling

** How they work

# This section rehashes the recommended reading [[http://spacemacs.org/doc/LAYERS.html]].

Layers are directories containing up to 5 files and possibly additional
packages.

# The following examples should have ~layer-name~ and ~pkg-name~ substituted
# with their actual names - this is not just convention but strict and a common
# source of issues.

In load order:
# ~layers.el~, ~packages.el~, ~funcs.el~, ~config.el~ and ~keybindings.el~:

- layers.el :: Layer dependencies to load first.

#+BEGIN_SRC lisp
(configuration-layer/declare-layers '(theming))
#+END_SRC

- packages.el :: Packages added or configured by the layer.

#+BEGIN_SRC lisp
(setq my-layer-packages
      '(melpa-pkg
        (github-pkg :location (recipe :fetcher github
                                      :repo "github-user/repo-name"))
        (my-pkg :location local)))
#+END_SRC

  - Owned Packages : A layer owns a package if it defines ~layer-name/init-pkg-name~. All packages not defined in ~dotspacemacs/additional/packages~ should have one and only one owner. It calls ~use-package~. Common options are ~:init~ for before load config, ~:config~ for after, ~:if~ for loading if eg. a certain OS or executable is installed, ~:after~ for enforcing load order, and ~:defer t~ for deferred loading.

#+BEGIN_SRC lisp
(defun display/init-pretty-outlines ()
  (use-package pretty-outlines
    :after outshine
    :config
    (progn
      (add-hook 'outline-mode-hook 'pretty-outline-set-display-table)
      (add-hook 'outline-minor-mode-hook 'pretty-outline-set-display-table)
      (add-hook 'emacs-lisp-mode-hook 'pretty-outline-add-bullets))))
#+END_SRC

  - Unowned Packages : A layer that does not own a package can configure it with ~layer-name/pre-init-pkg-name~ and ~layer-name/post-init-pkg-name~.

#+BEGIN_SRC lisp
(defun config/pre-init-neotree ()
  (evil-global-set-key 'normal (kbd "M-p")
                       'neotree-find-project-root))

(defun config/post-init-neotree ()
  (setq neo-theme 'icons))
#+END_SRC

  - Local Packages : Personal packages at ~local/my-pkg/my-pkg.el~.

#+BEGIN_SRC lisp
(require 'pkg1)    ; If any of its layer's packages are required
(require 'pkg2)    ; then make sure to use :after in its use-package call
(provide 'my-pkg)  ; Default pkg load order is lexical, don't rely on it
#+END_SRC

- funcs.el :: Layer functions.

Package agnostic functions belong here.

#+BEGIN_SRC lisp
(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))
#+END_SRC

Guarding against particular packages or layers:

#+BEGIN_SRC lisp
(when (configuration-layer/package-usedp 'some-pkg)
  (defun my-func ()))
(when (configuration-layer/layer-usedp 'some-layer)
  (defun my-func ()))
#+END_SRC

- config.el :: Layer variables.

#+BEGIN_SRC lisp
;; python/config.el
(defvar python-tab-width 4
  "Tab width value for python buffers")

;; init.el in dotspacemacs-configuration-layers
(python :variables python-tab-width 2)
#+END_SRC

Configuration defined here will be loaded before the package init functions are
executed. Layer dependencies are actually loaded prior to config.el.

This can be used for eg. setting theme updates with the ~theming~ layer.

#+BEGIN_SRC lisp
(setq theming-modifications
      `((solarized-dark (avy-background-face :foreground "#586e75")
                        (font-lock-doc-face :foreground "#2aa198"))
        (solarized-light ...)))
#+END_SRC

- keybindings.el :: Package-agnostic key-bindings.
#+BEGIN_SRC lisp
(global-set-key (kbd "M-d") 'spacemacs/delete-window)

;; Evil will be loaded
(evil-define-key '(normal visual motion) outline-minor-mode-map
  "gh" 'outline-up-heading)
#+END_SRC

* Personal Layers

While any organization can be used, I recommend these 5 layers covering most
needs.

*** A Macros/Base Layer

A base layer that all personal layers inherit packages, macros, and common
functions from with ~(configuration-layer/declare-layers '(macros))~.

I load ~dash-functional~ and define ~with-dir~, ~with-face~, and other useful
utilities here.

*** Config

All packages and their configuration and key-bindings that don't fit into any
neat grouping.

When any package's init gets large, consider a local package. I maintain my
org-mode setup separately in a local ~org-config~ package.

Anything, excluding spacemacs toggles, can be setup here. For instance:

#+BEGIN_SRC lisp
(setq config-packages '(evil ...))

(defun config/post-init-evil ()
  (setq evil-escape-key-sequence "jk")
  (setq evil-escape-unordered-key-sequence "true")
  (advice-add 'evil-ex-search-next :after 'config/scroll-to-center-advice)
  (advice-add 'evil-ex-search-previous :after 'config/scroll-to-center-advice))
#+END_SRC

I recommend this layer own *all additional packages* except themes, see gotchas.

*** Display

Theme updates and display packages like ~spaceline-all-the-icons~.

Due to how Spacemacs loads themes, I highly recommend declaring the
 ~theming~ layer a dependency for theme updates. It is much more efficient should
you configure multiple themes, like light and dark versions, and as it is a
layer, it will be loaded prior to ~config.el~ for proper code isolation.

I integrate and configure my local pretty packages here:

- /pretty-code/ : Program with custom ligatures and symbols, see <a href='{{< relref "prettify-mode.md" >}}'>mathematical notation in emacs</a>
- /pretty-eshell/ : Customize eshell information and faces, see <a href='{{< relref "custom-eshell.org" >}}'>making eshell your own</a>
- /pretty-fonts/ : All the icons and Fira Code ligature integration.
- /pretty-magit/ : Commit leaders, see <a href='{{< relref "pretty-magit.org" >}}'>pretty magit - integrating commit leaders</a>
- /pretty-outlines/ : Fancy outline bullets and ellipsis, see <a href='{{< relref "outline-bullets.org" >}}'>fancy outline bullets</a>

*** Langs (optional)

All language configuration and packages.

*** Personal (optional)

Personal packages that aren't display or language related. I maintain my Emacs blogging and outline navigation commands here.

* Gotchas

# mention how config doesnt load evil but does load explicitly set theming layer

Migrating was mostly painless. However when things go wrong, you lose access to
your config.

Non-obvious errors to avoid:

- Spacemacs toggles :: Like ~spacemacs/toggle-highlight-long-lines-globally-on~ do not belong in any layer and should be defined in your user-config. These toggles compose my entire ~dotspacemacs/user-config~. This goes for not just Spacemacs toggles - trying to setup ~fringe-mode~ fails even in a ~config/post-init-fringe~ block.

- OS Configuration :: I define ~is-linuxp~ and a few other OS-specific utilities that will conditionally choose ~dotspacemacs/init~ variables like font size and fullscreen settings. Layers load /after/, so the os utilities cannot be moved to a layer, in my case ~macros~. Set them at the top of your ~init.el~.

- Evil Load Time :: I defined ~evil-global-set-keys~ in ~macros~ which my ~config~ layer inherits. The catch - built-in ~evil-global-set-key~ will work in ~config/keybindings.el~ but set keys will raise that evil is not loaded. Beware of relying on dependencies not wrapped in inits.

- Additional Themes :: x
