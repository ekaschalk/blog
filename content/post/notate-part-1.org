#+TITLE: Notating Programs
#+SLUG: notate-part-1
#+DATE: 2019-03-11
#+CATEGORIES: lisp emacs
#+SUMMARY: Introducing Notate: indentation-aware, visual symbol replacements.
#+DRAFT: false

Programming with mathematical notation excites me. I want to
see:

- ~λ~ not ~lambda~
- ~ℤ~ not ~int~
- ~∀~ not ~for~
- ~∅~ not ~None~

This desire is matched by others. [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://github.com/i-tu/Hasklig][Hasklig]] fonts get us some of the
way there with ligatures for operators like ~>=~ and ~->~.

[[https://xkcd.com/378/]['Course]], there is an Emacs mode to do this: ~prettify-symbols~.

But we can't turn every language into our own, personal APL quite yet...

#+BEGIN_SRC lisp
(and foo   ; The actual text
     bar)
(∧ foo     ; What we see when working - bar isn't aligned!
     bar)
(∧ foo     ; What we want to see when working...
   bar)
(and foo   ; But now the true indentation is incorrect!
   bar)
#+END_SRC

Keep true or working indentation correct? Either choice strips benefit, leaving
us restricted to equal-width replacements. In other words, just some operators.

<a href='{{< relref "prettify-mode.md">}}'>Over two years ago I learned of this
problem</a> and <a href='{{< relref "lig-spacing.org" >}}'>periodically have
taken stabs at it</a>.

*I now introduce [[https://github.com/ekaschalk/notate][Notate]], indentation-aware visual symbol replacements.*

* Showcase


* Notes

Notate has solved:

- indentation issues with equal-width replacements.

* Limitations
